<?php
/**
 * WooCommerce Single Product Page Image Gallery Zoom
 *
 * @package woocommerce
 */


/*
 JQUERY ZOOM */

// Enable theme support for gallery zoom, in order to have the script loaded.
add_filter( 'after_setup_theme', fn() => add_theme_support( 'wc-product-gallery-zoom' ) );

// Disable gallery zoom for single products, however, to bypass WooCommerce's native method.
add_filter( 'woocommerce_single_product_zoom_enabled', '__return_false' );


add_action( 'woocommerce_product_thumbnails', '_proper_single_product_zoom_script_enqueue' );
function _proper_single_product_zoom_script_enqueue() {
	add_action( 'wp_footer', '_proper_single_product_zoom_script' );
}

// Add our UIkit slideshow-ready zoom script to the footer.
function _proper_single_product_zoom_script() {
	?>
	<style type='text/css'>
	.zoomImg { background: #fff; opacity: 0; }
	</style>
	<script type='text/javascript'>
	jQuery( function( $ ) {
		var $wc_gallery_image_first = $('.woocommerce-product-gallery__image').first();
		if( $wc_gallery_image_first.length ){
			$wc_gallery_image_first.not(':has(img.zoomImg)').zoom();
		}
		var $wc_gallery_slider = $('.woocommerce-product-gallery [uk-slideshow]');
		$wc_gallery_slider
			.on('itemshow', function(e){
				target = e.target;
				jQuery(target).not(':has(img.zoomImg)').zoom();
			});
	});
	</script>
	<?php
}

// Set the width and margin for the gallery wrapper.
add_filter(
	'woocommerce_single_product_image_gallery_classes',
	function( $classes ) {
		$classes[] = 'uk-width-large';
		$classes[] = 'uk-margin-large-bottom';
		return $classes;
	}
);


// Add our image params to the HTML generated by wc_get_gallery_image_html.
add_filter(
	'woocommerce_gallery_image_html_attachment_image_params',
	function( $params, $attachment_id, $image_size, $main_image ) {

		// We use the gallery wrapper classes to determine the 'sizes' attribute for the image.
		$wrapper_classes = apply_filters( 'woocommerce_single_product_image_gallery_classes', array() );

		if ( true === $main_image ) {
			// Parameters for the main image.

			// Generate the 'sizes' attribute for gallery images, based on single product page columns.
			$sizes = mp_sizes_attribute( 'medium', 2, $wrapper_classes );

			$params['sizes'] = $sizes;
			// $params['uk-cover'] = null;
		} else {
			// Parameters for the thumbnail images.

			$gallery_thumbnail_width = _proper_image_size_width( 'woocommerce_gallery_thumbnail', 'woocommerce_thumbnail', 'thumbnail' );

			if ( $gallery_thumbnail_width ) {
				$params['sizes'] = "{$gallery_thumbnail_width}px";
			}
		}
		return $params;
	},
	10,
	4
);


function _proper_get_product_image_ids( $product ) : array {

	$attachment_ids = $product->get_gallery_image_ids();

	// Add the product featured image to the beginnning of the array.
	array_unshift( $attachment_ids, (int) $product->get_image_id() );

	// Add product variation images to the gallery.
	if ( $product->is_type( 'variable' ) ) {
		$variations           = $product->get_available_variations();
		$variations_image_ids = wp_list_pluck( $variations, 'image_id' );
		$attachment_ids       = array_merge( $attachment_ids, $variations_image_ids );
	}

	// Remove duplicates.
	$attachment_ids = array_unique( array_filter( $attachment_ids ) );

	// Remove non-images.
	$attachment_ids = array_filter( $attachment_ids, 'wp_attachment_is_image' );

	return $attachment_ids;
}

add_filter(
	'proper_gallery_image_html_slider_params',
	function( $params, $attachment_ids ) {

		// Modify the slider parameters.
		$params[] = 'ratio: 1:1';
		$params[] = 'animation: fade';

		return $params;
	},
	10,
	2
);

function _proper_image_size_width( ...$sizes ) {
	// Get the WooCommerce gallery thumbnail width, falling back on the WP thumbnail width.
	$wp_additional_image_sizes = wp_get_additional_image_sizes();
	foreach ( $sizes as $size ) :
		if ( isset( $wp_additional_image_sizes[ $size ] ) ) {
			return $wp_additional_image_sizes[ $size ]['width'];
		}
	endforeach;
	return false;
}
